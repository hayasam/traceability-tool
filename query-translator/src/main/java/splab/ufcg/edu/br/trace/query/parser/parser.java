package splab.ufcg.edu.br.trace.query.parser;


//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140611 (SVN rev 31)
// Wed Jul 30 16:03:51 BRT 2014
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.List;
import splab.ufcg.edu.br.trace.query.controller.*;
import splab.ufcg.edu.br.trace.entities.*;
import splab.ufcg.edu.br.trace.query.*;

/** CUP v0.11b 20140611 (SVN rev 31) generated parser.
  * @version Wed Jul 30 16:03:51 BRT 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\057\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\004\006\000\002\013\003\000\002" +
    "\013\003\000\002\012\006\000\002\012\002\000\002\005" +
    "\005\000\002\006\007\000\002\014\005\000\002\007\005" +
    "\000\002\010\005\000\002\011\011\000\002\015\004\000" +
    "\002\016\005\000\002\016\002\000\002\017\003\000\002" +
    "\020\010\000\002\021\006\000\002\021\004\000\002\022" +
    "\005\000\002\022\002\000\002\023\004\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\025\005\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\027\004\000\002\027" +
    "\003\000\002\027\003\000\002\030\005\000\002\031\005" +
    "\000\002\032\003\000\002\032\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\132\000\022\002\uffff\043\016\044\022\045\015\046" +
    "\011\047\017\050\004\052\006\001\002\000\004\010\126" +
    "\001\002\000\022\002\ufffb\043\ufffb\044\ufffb\045\ufffb\046" +
    "\ufffb\047\ufffb\050\ufffb\052\ufffb\001\002\000\004\024\112" +
    "\001\002\000\022\002\ufffe\043\ufffe\044\ufffe\045\ufffe\046" +
    "\ufffe\047\ufffe\050\ufffe\052\ufffe\001\002\000\022\002\ufff8" +
    "\043\ufff8\044\ufff8\045\ufff8\046\ufff8\047\ufff8\050\ufff8\052" +
    "\ufff8\001\002\000\004\024\045\001\002\000\022\002\ufffd" +
    "\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd\052" +
    "\ufffd\001\002\000\004\002\044\001\002\000\022\002\ufffa" +
    "\043\ufffa\044\ufffa\045\ufffa\046\ufffa\047\ufffa\050\ufffa\052" +
    "\ufffa\001\002\000\004\024\042\001\002\000\006\024\032" +
    "\025\031\001\002\000\004\024\027\001\002\000\022\002" +
    "\uffff\043\016\044\022\045\015\046\011\047\017\050\004" +
    "\052\006\001\002\000\022\002\ufffc\043\ufffc\044\ufffc\045" +
    "\ufffc\046\ufffc\047\ufffc\050\ufffc\052\ufffc\001\002\000\004" +
    "\024\024\001\002\000\022\002\ufff9\043\ufff9\044\ufff9\045" +
    "\ufff9\046\ufff9\047\ufff9\050\ufff9\052\ufff9\001\002\000\004" +
    "\020\025\001\002\000\022\002\uffef\043\uffef\044\uffef\045" +
    "\uffef\046\uffef\047\uffef\050\uffef\052\uffef\001\002\000\004" +
    "\002\001\001\002\000\004\020\030\001\002\000\022\002" +
    "\uffee\043\uffee\044\uffee\045\uffee\046\uffee\047\uffee\050\uffee" +
    "\052\uffee\001\002\000\006\020\ufff5\031\ufff5\001\002\000" +
    "\006\020\ufff6\031\ufff6\001\002\000\006\020\ufff3\031\035" +
    "\001\002\000\004\020\041\001\002\000\004\004\036\001" +
    "\002\000\004\023\037\001\002\000\004\005\040\001\002" +
    "\000\004\020\ufff4\001\002\000\022\002\ufff7\043\ufff7\044" +
    "\ufff7\045\ufff7\046\ufff7\047\ufff7\050\ufff7\052\ufff7\001\002" +
    "\000\004\020\043\001\002\000\022\002\ufff2\043\ufff2\044" +
    "\ufff2\045\ufff2\046\ufff2\047\ufff2\050\ufff2\052\ufff2\001\002" +
    "\000\004\002\000\001\002\000\004\010\047\001\002\000" +
    "\004\004\066\001\002\000\016\011\051\043\053\044\054" +
    "\045\056\050\055\052\052\001\002\000\006\011\uffe4\017" +
    "\061\001\002\000\004\004\uffe6\001\002\000\004\024\uffde" +
    "\001\002\000\004\024\uffe2\001\002\000\004\024\uffe1\001" +
    "\002\000\004\024\uffdf\001\002\000\004\024\uffe0\001\002" +
    "\000\004\024\060\001\002\000\006\011\uffe3\017\uffe3\001" +
    "\002\000\014\043\053\044\054\045\056\050\055\052\052" +
    "\001\002\000\004\011\063\001\002\000\004\004\uffe7\001" +
    "\002\000\006\011\uffe4\017\061\001\002\000\004\011\uffe5" +
    "\001\002\000\004\051\070\001\002\000\004\005\111\001" +
    "\002\000\012\010\076\024\075\037\100\042\072\001\002" +
    "\000\012\011\uffdb\020\uffdb\040\uffdb\041\uffdb\001\002\000" +
    "\004\024\110\001\002\000\010\020\107\040\103\041\105" +
    "\001\002\000\012\011\uffdc\020\uffdc\040\uffdc\041\uffdc\001" +
    "\002\000\012\011\uffd8\020\uffd8\040\uffd8\041\uffd8\001\002" +
    "\000\012\010\076\024\075\037\100\042\072\001\002\000" +
    "\012\011\uffda\020\uffda\040\uffda\041\uffda\001\002\000\012" +
    "\011\uffd7\020\uffd7\040\uffd7\041\uffd7\001\002\000\010\011" +
    "\102\040\103\041\105\001\002\000\012\011\uffd6\020\uffd6" +
    "\040\uffd6\041\uffd6\001\002\000\012\010\uffd4\024\uffd4\037" +
    "\uffd4\042\uffd4\001\002\000\012\010\076\024\075\037\100" +
    "\042\072\001\002\000\012\010\uffd3\024\uffd3\037\uffd3\042" +
    "\uffd3\001\002\000\012\011\uffd5\020\uffd5\040\103\041\105" +
    "\001\002\000\004\005\uffdd\001\002\000\012\011\uffd9\020" +
    "\uffd9\040\uffd9\041\uffd9\001\002\000\022\002\uffe8\043\uffe8" +
    "\044\uffe8\045\uffe8\046\uffe8\047\uffe8\050\uffe8\052\uffe8\001" +
    "\002\000\004\031\113\001\002\000\004\004\114\001\002" +
    "\000\004\024\117\001\002\000\006\005\uffea\017\122\001" +
    "\002\000\004\005\120\001\002\000\006\005\uffe9\017\uffe9" +
    "\001\002\000\004\020\121\001\002\000\022\002\uffed\043" +
    "\uffed\044\uffed\045\uffed\046\uffed\047\uffed\050\uffed\052\uffed" +
    "\001\002\000\004\024\117\001\002\000\004\005\uffec\001" +
    "\002\000\006\005\uffea\017\122\001\002\000\004\005\uffeb" +
    "\001\002\000\004\024\130\001\002\000\004\011\133\001" +
    "\002\000\004\017\131\001\002\000\004\023\132\001\002" +
    "\000\004\011\ufff0\001\002\000\004\020\134\001\002\000" +
    "\022\002\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1" +
    "\050\ufff1\052\ufff1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\132\000\024\002\012\003\017\004\006\005\011\006" +
    "\020\007\004\010\013\011\022\020\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\032\001\001\000\002\001\001\000\024\002\025" +
    "\003\017\004\006\005\011\006\020\007\004\010\013\011" +
    "\022\020\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\045" +
    "\001\001\000\002\001\001\000\006\023\047\024\056\001" +
    "\001\000\004\022\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\023\063\024\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\064\001\001\000\002\001\001" +
    "\000\004\025\066\001\001\000\002\001\001\000\012\026" +
    "\072\027\073\030\070\031\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\026\100\027\073\030\070" +
    "\031\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\026\105\027\073\030\070\031\076\001\001\000" +
    "\002\001\001\000\004\032\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\115\017\114\001\001\000\004" +
    "\016\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\123\001\001" +
    "\000\002\001\001\000\004\016\124\001\001\000\002\001" +
    "\001\000\004\014\126\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    
    

    public void report_error(String message, Object info) {
   
        /* Create a StringBuilder called 'm' with the string 'Error' in it. */
        StringBuilder m = new StringBuilder("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info != null && (info instanceof java_cup.runtime.Symbol)) {
            
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuilder error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuilder error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        
        m.append(" : " + message );
        
        System.err.println(m);
    }
   
    

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // tlrLanguage ::= tlrDeclaration tlrLanguage 
            {
              Object RESULT =null;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlrLanguage",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= tlrLanguage EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // tlrLanguage ::= 
            {
              Object RESULT =null;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlrLanguage",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // tlrDeclaration ::= requirementsExpr 
            {
              Object RESULT =null;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlrDeclaration",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // tlrDeclaration ::= typesExpr 
            {
              Object RESULT =null;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlrDeclaration",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tlrDeclaration ::= artifactExpr 
            {
              Object RESULT =null;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlrDeclaration",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tlrDeclaration ::= semanticExpr 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlrDeclaration",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tlrDeclaration ::= viewExpr 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlrDeclaration",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tlrDeclaration ::= domainExpr 
            {
              Object RESULT =null;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlrDeclaration",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tlrDeclaration ::= queryExpr 
            {
              Object RESULT =null;
		int queryleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int queryright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TraceQuery query = (TraceQuery)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 TraceParser.getInstance().addTraceQuery(query); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlrDeclaration",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // requirementsExpr ::= REQUIREMENT idRequirementExpr requirementsDescription SEMICOLON 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("requirementsExpr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // idRequirementExpr ::= NAME 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idRequirementExpr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // idRequirementExpr ::= NUMBER 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idRequirementExpr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // requirementsDescription ::= EQ LBRACKET STRING RBRACKET 
            {
              Object RESULT =null;
		int requirementsDescriptionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int requirementsDescriptionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String requirementsDescription = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("requirementsDescription",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // requirementsDescription ::= 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("requirementsDescription",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // typesExpr ::= TYPE NAME SEMICOLON 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typesExpr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // artifactExpr ::= ARTIFACT LPAREN artifactDeclaration RPAREN SEMICOLON 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("artifactExpr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // artifactDeclaration ::= NAME COMMA STRING 
            {
              Object RESULT =null;
		int artifactTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int artifactTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String artifactType = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int artifactIdentifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int artifactIdentifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String artifactIdentifier = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("artifactDeclaration",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // semanticExpr ::= SEMANTIC NAME SEMICOLON 
            {
              Object RESULT =null;
		int semanticleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int semanticright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String semantic = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semanticExpr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // viewExpr ::= VIEW NAME SEMICOLON 
            {
              Object RESULT =null;
		int viewleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int viewright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String view = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("viewExpr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // domainExpr ::= DOMAIN NAME EQ LBRACKET domainArtifactList RBRACKET SEMICOLON 
            {
              Object RESULT =null;
		int domainNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int domainNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String domainName = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("domainExpr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // domainArtifactList ::= unaryArtifact multipleArtifacts 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("domainArtifactList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // multipleArtifacts ::= COMMA unaryArtifact multipleArtifacts 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multipleArtifacts",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // multipleArtifacts ::= 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multipleArtifacts",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // unaryArtifact ::= NAME 
            {
              Object RESULT =null;
		int artifactNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int artifactNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String artifactName = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryArtifact",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // queryExpr ::= QUERY NAME queryParametersExpr LBRACKET queryResultExpr RBRACKET 
            {
              TraceQuery RESULT =null;
		int queryNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int queryNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String queryName = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		QueryParameterList parameters = (QueryParameterList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		QueryExpression expression = (QueryExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = new TraceQuery(queryName, parameters, expression);


              CUP$parser$result = parser.getSymbolFactory().newSymbol("queryExpr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // queryParametersExpr ::= LPAREN unaryParameter multipleParameter RPAREN 
            {
              QueryParameterList RESULT =null;
		int currentParamenterleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int currentParamenterright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		QueryParameter currentParamenter = (QueryParameter)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nextParameterleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nextParameterright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		QueryParameterList nextParameter = (QueryParameterList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new QueryParameterList(currentParamenter, nextParameter); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("queryParametersExpr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // queryParametersExpr ::= LPAREN RPAREN 
            {
              QueryParameterList RESULT =null;
		 RESULT = new QueryParameterList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("queryParametersExpr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // multipleParameter ::= COMMA unaryParameter multipleParameter 
            {
              QueryParameterList RESULT =null;
		int currentParamenterleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int currentParamenterright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		QueryParameter currentParamenter = (QueryParameter)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nextParameterleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nextParameterright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		QueryParameterList nextParameter = (QueryParameterList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new QueryParameterList(currentParamenter, nextParameter); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multipleParameter",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // multipleParameter ::= 
            {
              QueryParameterList RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multipleParameter",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // unaryParameter ::= paramType NAME 
            {
              QueryParameter RESULT =null;
		int paramTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paramTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		QueryParameterTypeEnum paramType = (QueryParameterTypeEnum)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int paramValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String paramValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new QueryParameter(paramType, paramValue); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryParameter",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // paramType ::= REQUIREMENT 
            {
              QueryParameterTypeEnum RESULT =null;
		 RESULT = QueryParameterTypeEnum.REQUIREMENT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramType",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // paramType ::= SEMANTIC 
            {
              QueryParameterTypeEnum RESULT =null;
		 RESULT = QueryParameterTypeEnum.SEMANTIC; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramType",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // paramType ::= TYPE 
            {
              QueryParameterTypeEnum RESULT =null;
		 RESULT = QueryParameterTypeEnum.ARTIFACT_TYPE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramType",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // paramType ::= ARTIFACT 
            {
              QueryParameterTypeEnum RESULT =null;
		 RESULT = QueryParameterTypeEnum.ARTIFACT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramType",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // paramType ::= DOMAIN 
            {
              QueryParameterTypeEnum RESULT =null;
		 RESULT = QueryParameterTypeEnum.DOMAIN; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramType",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // queryResultExpr ::= RESULT queryExpression SEMICOLON 
            {
              QueryExpression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		QueryExpression expr = (QueryExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = expr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("queryResultExpr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // queryExpression ::= simpleExpression 
            {
              QueryExpression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleQuery expr = (SimpleQuery)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = expr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("queryExpression",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // queryExpression ::= parenthesisExpression 
            {
              QueryExpression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParenthesisQuery expr = (ParenthesisQuery)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = expr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("queryExpression",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // queryExpression ::= compositeExpression 
            {
              QueryExpression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CompositeQuery expr = (CompositeQuery)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = expr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("queryExpression",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // simpleExpression ::= NOT NAME 
            {
              SimpleQuery RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SimpleQuery (QueryOperatorEnum.NOT, value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simpleExpression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // simpleExpression ::= NAME 
            {
              SimpleQuery RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SimpleQuery (value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simpleExpression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // simpleExpression ::= TIMES 
            {
              SimpleQuery RESULT =null;
		 RESULT = new SimpleQuery (QueryOperatorEnum.ALL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simpleExpression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parenthesisExpression ::= LPAREN queryExpression RPAREN 
            {
              ParenthesisQuery RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		QueryExpression expr = (QueryExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ParenthesisQuery (expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parenthesisExpression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // compositeExpression ::= queryExpression queryOperator queryExpression 
            {
              CompositeQuery RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		QueryExpression left = (QueryExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		QueryOperatorEnum op = (QueryOperatorEnum)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		QueryExpression right = (QueryExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CompositeQuery(left, right, op); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compositeExpression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // queryOperator ::= AND 
            {
              QueryOperatorEnum RESULT =null;
		 RESULT = QueryOperatorEnum.AND; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("queryOperator",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // queryOperator ::= OR 
            {
              QueryOperatorEnum RESULT =null;
		 RESULT = QueryOperatorEnum.OR; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("queryOperator",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

